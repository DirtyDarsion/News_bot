import os
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv

import asyncio
import aioschedule
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import BotCommand
from aiogram.types.input_file import InputFile
from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from data_shape import get_data, search_city
from db_conn import update_user, get_user_data

load_dotenv()

ADMIN = os.getenv('ADMIN')
TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

commands = [
    # BotCommand(command='/task', description='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏'),
    BotCommand(command='/start', description='–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º'),
    BotCommand(command='/setcity', description='–°–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥'),
    BotCommand(command='/help', description='–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã'),
]


class User(StatesGroup):
    city = State()


class TimeTask(StatesGroup):
    time_task = State()


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
async def send_news(user_id):
    data = get_data(user_id)
    
    forecasts_text = ''
    if data['forecasts']:
        for i in data['forecasts']:
            forecasts_text += f"{i['date']}: ‚òÄ{i['day']}¬∞C - üåí {i['night']}¬∞C\n"
    else:
        forecasts_text = '–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞'

    text = f"–¢–µ–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temp_fact']}¬∞C, {data['condition_fact']}\n\n" \
           f"{forecasts_text}\n\n" \
           f"–î–æ–ª–ª–∞—Ä: {data['usd']}{data['usd_changes']}\n–ï–≤—Ä–æ: {data['eur']}{data['eur_changes']}\n\n" \
           f"–í—Ä–µ–º—è: {data['time']} {data['date']}"
    photo = InputFile(f"weather_images/{data['photo']}.jpg")

    await bot.send_photo(user_id, photo=photo, caption=text)


@dp.message_handler(commands=['help'])
async def send_help(message):
    user_id = message.from_user.id
    db_user = get_user_data(user_id)

    if db_user:
        city_info = f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{db_user['city']}</b>\n" \
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{db_user['timezone']}</b>\n"
    else:
        city_info = ''

    await message.answer('–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.\n\n'
                         '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ–¥–∏ /task, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
                         f'{city_info}\n'
                         '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                         '/task - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—é,\n'
                         '/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã,\n'
                         '/setcity - —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥,\n'
                         '/help - –ø–æ–º–æ—â—å.',
                         parse_mode='HTML')


@dp.message_handler(commands=['start'])
async def send_start(message):
    user_id = message.from_user.id
    db_data = get_user_data(user_id)

    if db_data:
        text = f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{db_data['city']}</b>\n" \
               f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{db_data['timezone']}</b>\n\n" \
               f"<i>–î–ª—è —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ</i> /setcity"

        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:')
        await User.city.set()


@dp.message_handler(state=User.city)
async def city_choosen(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    await state.finish()

    obj = search_city(data['city'])
    if obj:
        if obj['region'] is None:
            region = ''
        else:
            region = ', ' + obj['region']

        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{obj['city']}{region}</b>\n\n" \
               f"<i>–î–ª—è —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ</i> /setcity"

        update_user(
            tg_id=message.from_user.id,
            city=obj['city'],
            timezone=obj['timezone'],
            lat=obj['lat'],
            lon=obj['lon']
        )
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer(f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /setcity –∏–ª–∏ /start")


@dp.message_handler(commands=['setcity'])
async def send_cetcity(message):
    user_id = message.from_user.id
    db_user = get_user_data(user_id)

    if db_user:
        text = f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{db_user['city']}</b>\n" \
               f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{db_user['timezone']}</b>\n\n" \
               f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
        await message.answer(text, parse_mode='HTML')
        await User.city.set()
    else:
        await send_start(message)

'''
–í—ã–∑–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

@dp.message_handler(commands=['task'])
async def set_task(message):
    user_id = message.from_user.id
    db_user = get_user_data(user_id)

    if db_user:
        set_task_message(user_id, message.message_id + 1)
        tasks = db_user['tasks']

        if tasks:
            task_text = ''
            for key in tasks:
                task_text += key + ', '
            task_text = task_text[:-2]
        else:
            task_text = '–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
        text = f"–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å: <b>{task_text}</b>."

        button_create = InlineKeyboardButton('–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è',  callback_data='create_task')
        button_delete = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è', callback_data='delete_task')
        keyboard = InlineKeyboardMarkup().add(button_create, button_delete)

        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await send_start(message)


@dp.callback_query_handler(lambda c: c.data == 'create_task')
async def create_task(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    db_user = get_user_data(user_id)

    await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú"', user_id, db_user['task_message'])
    await TimeTask.time_task.set()


@dp.message_handler(state=TimeTask.time_task)
async def set_time(message: types.Message, state: FSMContext):
    await state.update_data(time_task=message.text)
    state_data = await state.get_data()
    await state.finish()
    user_id = message.from_user.id
    db_user = get_user_data(user_id)

    user_time = state_data['time_task']
    time_split = user_time.split(':')
    if time_split[0].isdigit() and time_split[1].isdigit() and len(time_split) == 2:
        user_time_str = datetime.strptime(user_time, "%H:%M").strftime("%H:%M")
        utc = int(db_user['timezone'][4:])
        time_with_utc = datetime.strptime(user_time, "%H:%M") - timedelta(hours=utc)
        time_with_utc = time_with_utc.strftime('%H:%M')

        task = aioschedule.every().day.at(time_with_utc).do(send_news, user_id)
        db_user['tasks'][user_time_str] = task
        await bot.send_message(user_id, '–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    else:
        await bot.send_message(user_id, '–í—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É.')


@dp.callback_query_handler(lambda c: c.data == 'delete_task')
async def delete_task(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    data = db[user_id]
    tasks = data['tasks']

    keyboard = InlineKeyboardMarkup()
    for task in tasks:
        keyboard.add(InlineKeyboardButton(task, callback_data='delete:'+task))

    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', user_id, data['task_message'], reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data[:7] == 'delete:')
async def delete_task_num(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    data = db[user_id]
    tasks = data['tasks']
    task = callback_query.data[7:]

    aioschedule.cancel_job(tasks.pop(task))

    await bot.edit_message_text('–£—Å–ø–µ—à–Ω–æ!', user_id, data['task_message'])
'''


@dp.message_handler()
async def send_answer(message):
    db_user = get_user_data(message.from_user.id)
    if db_user:
        await send_news(message.from_user.id)
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /start')


async def scheduler():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    await bot.set_my_commands(commands)

    aioschedule.every().day.at('2:30').do(send_news, ADMIN)
    aioschedule.every().day.at('7:00').do(send_news, ADMIN)
    aioschedule.every().day.at('11:00').do(send_news, ADMIN)
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(
        dispatcher=dp,
        on_startup=on_startup,
    )
